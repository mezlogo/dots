package mezlogo.{project_name}

import com.fasterxml.jackson.annotation.JsonAutoDetect
import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.PropertyAccessor
import com.fasterxml.jackson.databind.ObjectMapper
import com.panbet.common.services.CommandProxy
import com.panbet.core.reflection.CommandFactory
import com.panbet.core.reflection.HttpClient3CommandInvoker
import com.panbet.core.reflection.RemoteCommandExecutor

fun createObjectMapper(): ObjectMapper {{
    val mapper = ObjectMapper()
    mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)
    mapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE)
    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)
    mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY)
    mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT)
    return mapper
}}

fun createCommandProxy(url: String, channel: String): CommandProxy {{
    val httpClient3CommandInvoker = HttpClient3CommandInvoker(false, 500, 1)
    val remoteCommandExecutor = RemoteCommandExecutor(url, httpClient3CommandInvoker)
    return CommandProxy(CommandFactory(channel), remoteCommandExecutor, 1)
}}
