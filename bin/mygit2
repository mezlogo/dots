#!/bin/env python
import argparse
import os
from argparse import ArgumentTypeError
from enum import Enum

import wgit
from wgit import GitWrapperDirs, GitWrapperArguments, GitInfo, GitBranchCompare


def check_dir_and_parse(arg: str) -> GitWrapperDirs:
    dirs = arg.split(":")

    dirs_len = len(dirs)
    if 2 < dirs_len:
        raise ArgumentTypeError(
            f"Max 1 colon permitted in git location argument. You passed: {arg}")

    result = (dirs[0], dirs[1] if 2 == dirs_len else f"{dirs[0]}/.git")

    for repo_dir in result:
        if not os.path.isdir(repo_dir):
            raise ArgumentTypeError(
                f"{repo_dir} should be at least a directory")

    return GitWrapperDirs(result[0], result[1])


def main():
    parser = argparse.ArgumentParser(description='git batch automation tool')
    parser.add_argument('-d', '--dry', action='store_true', help='Output shell command without execution')
    parser.add_argument('-v', '--verbose', action='store_true', help='Print git output')
    parser.add_argument('-c', '--command', choices=['report', 'export', 'import'], default='report')
    parser.add_argument('repos', type=check_dir_and_parse,
                        help='Git repos. Use colon when working and git dirs are not the same',
                        nargs='+')

    args = parser.parse_args()
    parsed_args = GitWrapperArguments(args.repos, args.verbose, args.dry)
    if 'report' == args.command:
        report(parsed_args)
    elif 'import' == args.command:
        import_git(parsed_args)
    elif 'export' == args.command:
        export_git(parsed_args)


def report(arg: GitWrapperArguments):
    results = wgit.report(arg)
    for result in results:
        print(gitInfo_to_str(result))


class Colours(Enum):
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def colorize(msg: str, colour: Colours) -> str:
    return f"{colour.value}{msg}{Colours.ENDC.value}"


def gitInfo_to_str(info: GitInfo) -> str:
    c = lambda m: colorize(m, Colours.OKCYAN)
    g = lambda m: colorize(m, Colours.OKGREEN)
    b = lambda m: colorize(m, Colours.OKBLUE)
    y = lambda m: colorize(m, Colours.WARNING)

    dir_name = c(info.dir_name.ljust(10))
    updated = g(str(info.last_fetch_hours).rjust(8))
    additional = '' if info.branch == 'master' else y(info.branch.rjust(8))

    if info.master_compare in [GitBranchCompare.BOTH_AHEAD, GitBranchCompare.BEHIND]:
        additional += f" {b('NEED_EXPORT')}"

    if info.master_compare in [GitBranchCompare.BOTH_AHEAD, GitBranchCompare.AHEAD]:
        additional += f" {b('NEED_IMPORT')}"

    return f"{dir_name}:{updated} hours ago;{additional}\n{info.unstage_files}"


def export_git(arg: GitWrapperArguments):
    reports = wgit.report(arg)
    for it in reports:
        if it.master_compare in [GitBranchCompare.AHEAD] or it.unstage_files.strip():
            pass
        else:
            print(f"noting to export for {it.dir_name}")


def import_git(arg: GitWrapperArguments):
    results = wgit.fetch(arg)
    errors = [r for r in results if 0 != r.ret]
    if errors:
        print(f"errors: {errors}")
    else:
        report(arg)


if __name__ == "__main__":
    main()