#!/bin/env python
from git import Repo, Git
import sys
from dataclasses import dataclass
import os
import stat
import time

FETCH_PATH = ".git/FETCH_HEAD"
FILE_NAME_SEPARATOR = "\n\t\t"

@dataclass
class GitData:
    path: str
    last_fetch: int
    tag: str
    remote_tag: str
    branch: str
    tracked: str
    untracked: str
    is_up_to_date: bool

def get_tag_or_none(gitrepo: Git, branch: str):
    try:
        return gitrepo.describe('--tags', branch, abbrev=0)
    except:
        return None

def parse_git(path: str):
    repo = Repo(path)

    last_fetch = os.stat(f"{repo.working_dir}/{FETCH_PATH}")[stat.ST_MTIME]

    gitrepo = repo.git

    tag = get_tag_or_none(gitrepo, 'HEAD')
    remote_tag = get_tag_or_none(gitrepo, 'origin/master')
    branch = repo.active_branch.name

    untracked = FILE_NAME_SEPARATOR.join(repo.untracked_files)
    tracked = FILE_NAME_SEPARATOR.join(gitrepo.ls_files("-m").split("\n"))

    return GitData(path, last_fetch, tag, remote_tag, branch, tracked, untracked, True)


def pretty_format(report: GitData):
    now = int(time.mktime(time.localtime()))
    last_fetch = round((now - report.last_fetch) / 3600, 2)
    need_update = "" if report.tag == report.remote_tag else "NEED_UPDATE"
    name = report.path.split("/")[-1]
    branch = "" if "master" == report.branch else report.branch
    tracked = report.tracked
    if (tracked):
        tracked = f"\n\ttracked:{FILE_NAME_SEPARATOR}{tracked}"
    untracked = report.untracked
    if (untracked):
        untracked = f"\n\tuntracked:{FILE_NAME_SEPARATOR}{untracked}"

    print("{}: updated {} hours ago {} {} {} {}".format(
        name.ljust(8), last_fetch, need_update, branch, tracked, untracked))

def main(args):
    if 0 == len(args):
        print("plz, enter git repos as args")
        exit(-1)
    for path in args:
        pretty_format(parse_git(path))

if __name__ == "__main__":
   main(sys.argv[1:])